# mluckydwyer/hw-ci Docker Container
FROM centos:7 as base

LABEL Maintainer="Matthew Dwyer <dwyer@iastate.edu>"
LABEL Name="Hardware Verification CI Docker container-Slim"
LABEL Description="Modelsim, Verilator, GHDL, VUnit, CocoTB, and Pytest for HW CI regression testing."
ENV container docker

# Update Yum Repos & Update All
RUN yum install -y https://packages.endpoint.com/rhel/7/os/x86_64/endpoint-repo-1.9-1.x86_64.rpm \
    && yum update -y \
    && yum install -y git make epel-release

# Install Python
FROM base as python3
RUN yum -y install gcc gcc-c++ libstdc++-devel \
    &&  yum -y install libgcc.i686 glibc-devel.i686 glibc.i686 zlib-devel.i686 \
        readline-devel.i686 gdbm-devel.i686 openssl-devel.i686 ncurses-devel.i686 \
        tcl-devel.i686 db4-devel.i686 bzip2-devel.i686 libffi-devel.i686 \
    && mkdir /tmp/{Archive,Build} \
    && curl -s -S -L https://www.python.org/ftp/python/3.6.14/Python-3.6.14.tgz -o /tmp/Archive/Python-3.6.14.tgz \
    && tar xzvf /tmp/Archive/Python-3.6.14.tgz -C /tmp/Build \
    && rm /tmp/Archive/Python-3.6.14.tgz \
    && mkdir -p /opt/Python-3.6.14 \
    && cd /tmp/Build/Python-3.6.14 \
    && CFLAGS=-m32 LDFLAGS=-m32 ./configure --prefix /opt/Python-3.6.14 --enable-shared \
    && LD_RUN_PATH=/opt/Python-3.6.145/lib make -j 8 \
    && make install
ENV PATH="/opt/Python-3.6.14/bin:${PATH}"
ENV LD_LIBRARY_PATH="/opt/Python-3.6.14/lib:/opt/Python-3.6.14/share:${LD_LIBRARY_PATH}"
ENV CPATH="/opt/Python-3.6.14/include:${CPATH}"
RUN pip3 install --upgrade pip setuptools \
    && pip3 install wheel

# Patch CocoTB-test simulation.py with custom implementation for Modelsim complilation
# RUN rm /opt/Python-3.6.14/lib/python3.6/site-packages/cocotb_test/simulator.py
# COPY resources/simulator.py /opt/Python-3.6.14/lib/python3.6/site-packages/cocotb_test/simulator.py
# EXPOSE 5678

# Install VUnit
FROM python3 as vunit
RUN pip3 install vunit_hdl

# Install Modelsim
FROM vunit as modelsim
RUN yum install -y libiodbc unixODBC ncurses ncurses-libs \
    zeromq-devel libXext alsa-lib libXtst libXft libxml2 libedit libX11 libXi \
    glibc glibc.i686 glibc-devel.i386 libgcc.i686 libstdc++-devel.i686 libstdc++ \
    libstdc++.i686 libXext libXext.i686 libXft libXft.i686 libXrender libXtst
WORKDIR /tmp
RUN curl -s -S -O https://download.altera.com/akdlm/software/acdsinst/20.1std.1/720/ib_installers/ModelSimSetup-20.1.1.720-linux.run \
    && chmod +x ModelSimSetup-20.1.1.720-linux.run \
    && ./ModelSimSetup-20.1.1.720-linux.run --mode unattended --installdir /opt/intelFPGA/20.1 --accept_eula 1 --modelsim_edition modelsim_ase \
    && rm ModelSimSetup-20.1.1.720-linux.run
ENV PATH="/opt/intelFPGA/20.1/modelsim_ase/bin:${PATH}"


# Install Verilator
FROM modelsim as verilator
RUN yum -y install verilator

# Install GHDL
FROM verilator as ghdl
ENV OG_PATH=$PATH
ENV PATH=/opt/gnat/bin:$PATH
RUN yum -y install bzip2 curl flex fontconfig zlib-devel centos-release-scl \
    && yum install -y devtoolset-8 texinfo \
    && mkdir -p /tmp/gnat \
    && curl -s -S -L https://community.download.adacore.com/v1/9682e2e1f2f232ce03fe21d77b14c37a0de5649b?filename=gnat-gpl-2017-x86_64-linux-bin.tar.gz | tar -xz -C /tmp/gnat --strip-components=1 \
    && cd /tmp/gnat \
    && make ins-all prefix="/opt/gnat" \
    && mkdir ghdl-1.0.0 \
    && curl -sSL https://github.com/ghdl/ghdl/archive/refs/tags/v1.0.0.tar.gz | tar -xz -C ./ghdl-1.0.0 --strip-components=1 \
    && cd ghdl-1.0.0 \
    && ./configure --prefix=/usr/local \
    && make -j 4 \
    && make install \
    # && pip3 install pyghdl \
    && cd .. \
    && rm -rf ./ghdl-1.0.0 \
    && rm -rf /tmp/gnat \
    # && yum remove devtoolset-8

# SHELL [ "/usr/bin/scl", "enable", "devtoolset-8" ]
# RUN mkdir ghdl-1.0.0 \
#     && curl -sSL https://github.com/ghdl/ghdl/archive/refs/tags/v1.0.0.tar.gz | tar -xz -C ./ghdl-1.0.0 --strip-components=1
# WORKDIR ghdl-1.0.0
# RUN ./configure --prefix=/usr/local \
#     && make -j 4 \
#     && make install
ENV PATH=$OG_PATH

# Install CocoTb
FROM ghdl as cocotb
RUN pip3 install glob2 coverage cocotb cocotb_bus cocotb-test cocotb-coverage cocotbext-axi \
                 pytest pytest-parallel pytest-xdist pytest-html pytest-sugar pytest-randomly \
                 pytest-emoji pytest-icdiff pytest-asyncio pytest-rerunfailures pytest-repeat

# User [coder:coder]
# RUN useradd -ms /bin/bash coder -m -G wheel,root -p "$(openssl passwd -1 coder)"
# RUN usermod -aG wheel coder
# USER coder
# ENV USER=coder
# WORKDIR /home/coder

FROM cocotb as final
RUN mkdir -p /workspaces/logs
WORKDIR /workspaces/
#ENTRYPOINT /usr/bin/startup.sh
RUN chmod +rw /root/ -R
