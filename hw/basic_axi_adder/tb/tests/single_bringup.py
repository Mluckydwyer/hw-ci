import os, itertools, cocotb, pytest

from cocotb.triggers import RisingEdge
from cocotb.binary import BinaryValue
from cocotbext.axi.axis import AxiStreamFrame

from basic_axi_adder_tb import BasicAdderTB
import hw.basic_axi_adder.tb.cocotb_base as cocotb_base


# CocoTB test definition. These can then be generated by the Pytest runner
# There can be many of these as well to allow for various tests
@cocotb.test(timeout_time=1000000)
async def single_bringup(dut):
    """Test addition of 2 values: A + B"""
    tb = BasicAdderTB(dut)
    await tb.dut_setup()

    # Grab our test inputs
    data_width = int(dut.C_DATA_WIDTH)
    a = int(os.environ.get("A")) #cocotb.parameters.A
    b = int(os.environ.get("B")) #cocotb.parameters.B
    dut._log.info(f'Data Width: {data_width}\n')
    dut._log.info(f'A: {a}\n')
    dut._log.info(f'B: {b}\n')

    # Get fmodel result
    exp = tb.fmodel(a, b, data_width)

    # Pack our data
    tid = 1
    packed_data_in = a << data_width | b
    stream_frame = AxiStreamFrame(tdata=[packed_data_in], tid=tid)
    
    # Send the data to out DUT
    await RisingEdge(dut.aclk) # and tb.axis_sink_drv
    await tb.axis_source_drv.send(stream_frame)
    
    # Wait for our result
    hdl_result = await tb.axis_sink_drv.recv()
    tb.compareResult(dut, hdl_result, exp)
