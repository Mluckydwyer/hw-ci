import os, itertools, cocotb, pytest

from cocotb.triggers import RisingEdge
from cocotb.binary import BinaryValue
from cocotbext.axi.axis import AxiStreamFrame

# from basic_axi_adder_tb import BasicAdderTB
from basic_axi_adder_tb import *
import hw.basic_axi_adder.tb.old_cocotb_base as old_cocotb_base

# CocoTB test definition. These can then be generated by the Pytest runner
# There can be many of these as well to allow for various tests
@cocotb.test()
async def single_random(dut):
    """Test addition of random values"""
    tb = BasicAdderTB(dut)
    await tb.dut_setup()

    data_width = int(dut.C_DATA_WIDTH) # cocotb.parameters.C_DATA_WIDTH
    dut._log.info(f'Data Width: {data_width}\n')

    # Run generated tests
    for i, (a, b) in enumerate(zip(gen_input_samples(), gen_input_samples())):
        dut._log.info(f'A: {a}\n')
        dut._log.info(f'B: {b}\n')

        # Get fmodel result
        exp = tb.fmodel(a, b, data_width)

        # Pack our data
        tid = 1
        packed_data_in = a << data_width | b
        stream_frame = AxiStreamFrame(tdata=[packed_data_in], tid=tid)
        
        # Send the data to out DUT
        await RisingEdge(dut.aclk) # and tb.axis_sink_drv
        await tb.axis_source_drv.send(stream_frame)
        
        # Wait for our result
        hdl_result = await tb.axis_sink_drv.recv()
        tb.compareResult(dut, hdl_result, exp)

        if i % 100 == 0:
            dut._log.info(f"{i} / {NUM_SAMPLES}")

    await RisingEdge(dut.aclk)


@pytest.mark.usefixtures("gui", "seed")
def single_random_test(gui, seed):
    run_cocotb(gui, seed)

